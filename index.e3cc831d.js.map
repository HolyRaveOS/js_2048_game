{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.board = initialState;\n        this.size = initialState.length;\n        this.fieldsRows = this.getFieldsRows();\n        this.currentScore = 0;\n        this.currentScoreElement = document.querySelector(\".game-score\");\n        this.loseMessage = document.querySelector(\".message-lose\");\n        this.winMessage = document.querySelector(\".message-win\");\n        this.startMessage = document.querySelector(\".message-start\");\n        this.gameStatus = \"idle\";\n    }\n    moveLeft() {\n        this.move(\"ArrowLeft\");\n    }\n    moveRight() {\n        this.move(\"ArrowRight\");\n    }\n    moveUp() {\n        this.move(\"ArrowUp\");\n    }\n    moveDown() {\n        this.move(\"ArrowDown\");\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.currentScore;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.gameStatus;\n    }\n    start() {\n        this.fillRandomEmptyCell();\n        this.fillRandomEmptyCell();\n        const startBtn = document.querySelector(\".start\");\n        this.startBtn = startBtn;\n        addEventListener(\"keydown\", (e)=>{\n            switch(e.key){\n                case \"ArrowRight\":\n                    this.moveRight();\n                    break;\n                case \"ArrowLeft\":\n                    this.moveLeft();\n                    break;\n                case \"ArrowUp\":\n                    this.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    this.moveDown();\n                    break;\n            }\n        });\n        startBtn.addEventListener(\"click\", ()=>{\n            if (startBtn.classList.contains(\"start\")) {\n                this.gameStatus = \"playing\";\n                this.menageStates();\n            } else this.restart();\n        });\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board.forEach((column, i)=>{\n            column.forEach((el, j)=>{\n                this.board[i][j] = 0;\n            });\n        });\n        this.updateField();\n        this.gameStatus = \"idle\";\n        this.fillRandomEmptyCell();\n        this.fillRandomEmptyCell();\n        this.menageStates();\n    }\n    menageStates() {\n        switch(this.gameStatus){\n            case \"idle\":\n                this.currentScore = 0;\n                this.currentScoreElement.innerHTML = this.currentScore;\n                this.startBtn.className = \"button start\";\n                this.startBtn.innerHTML = \"Start\";\n                this.loseMessage.classList.add(\"hidden\");\n                this.winMessage.classList.add(\"hidden\");\n                this.startMessage.classList.remove(\"hidden\");\n                break;\n            case \"playing\":\n                this.startBtn.style.pointerEvents = \"none\";\n                this.startMessage.classList.add(\"hidden\");\n                break;\n            case \"win\":\n                this.winMessage.classList.remove(\"hidden\");\n                break;\n            case \"lose\":\n                this.loseMessage.classList.remove(\"hidden\");\n                break;\n            default:\n                throw new Error(\"Something went wrong\");\n        }\n    }\n    move(direction) {\n        let hasChanged = false;\n        this.gameStatus = \"playing\";\n        this.menageStates();\n        this.startBtn.className = \"button restart\";\n        this.startBtn.innerHTML = \"Restart\";\n        this.startBtn.style.pointerEvents = \"initial\";\n        this.checkIfTheGameOver();\n        if (direction === \"ArrowUp\" || direction === \"ArrowDown\") for(let j = 0; j < this.size; j++){\n            const column = [\n                ...Array(this.size)\n            ].map((_, i)=>this.board[i][j]);\n            const newColumn = this.transformField(column, direction === \"ArrowUp\");\n            for(let i = 0; i < this.size; i++)if (this.board[i][j] !== newColumn[i]) {\n                hasChanged = true;\n                this.board[i][j] = newColumn[i];\n            }\n        }\n        else if (direction === \"ArrowLeft\" || direction === \"ArrowRight\") for(let i = 0; i < this.size; i++){\n            const row = this.board[i];\n            const newRow = this.transformField(row, direction === \"ArrowLeft\");\n            if (row.join(\",\") !== newRow.join(\",\")) {\n                hasChanged = true;\n                this.board[i] = newRow;\n            }\n        }\n        if (hasChanged) this.fillRandomEmptyCell();\n    }\n    checkIfTheGameOver() {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            if (this.board[i][j] === 0) return;\n            if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) return;\n            if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) return;\n        }\n        this.gameStatus = \"lose\";\n        this.menageStates();\n    }\n    transformField(line, moveToStart) {\n        const newLine = line.filter((cell)=>cell !== 0);\n        if (!moveToStart) newLine.reverse();\n        for(let i = 0; i < newLine.length - 1; i++)if (newLine[i] === newLine[i + 1]) {\n            newLine[i] *= 2;\n            this.updateScore(newLine[i]);\n            newLine.splice(i + 1, 1);\n        }\n        while(newLine.length < this.size)newLine.push(0);\n        if (!moveToStart) newLine.reverse();\n        return newLine;\n    }\n    updateField() {\n        this.fieldsRows.forEach((column, i)=>{\n            column.forEach((cell, j)=>{\n                cell.innerHTML = this.board[i][j] === 0 ? \"\" : this.board[i][j];\n                cell.className = `field-cell field-cell--${this.board[i][j]}`;\n            });\n        });\n    }\n    getFieldsRows() {\n        const nodesArr = [];\n        const fieldsRows = document.querySelectorAll(\".field-row\");\n        fieldsRows.forEach((row)=>{\n            nodesArr.push(Array.from(row.childNodes).filter((node)=>node.nodeType === Node.ELEMENT_NODE));\n        });\n        return nodesArr;\n    }\n    updateScore(value) {\n        const winValue = 2048;\n        if (value === winValue) {\n            this.gameStatus = \"win\";\n            this.menageStates();\n        }\n        this.currentScore += value;\n        this.currentScoreElement.innerHTML = this.currentScore;\n    }\n    fillRandomEmptyCell() {\n        const emptyFields = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyFields.push({\n                x: i,\n                y: j\n            });\n        }\n        if (emptyFields.length > 0) {\n            const randomCell = emptyFields[Math.floor(Math.random() * emptyFields.length)];\n            this.board[randomCell.x][randomCell.y] = Math.random() < 0.9 ? 2 : 4;\n            this.updateField();\n            this.toggleAnimationClass(this.fieldsRows[randomCell.x][randomCell.y]);\n        }\n    }\n    toggleAnimationClass(value) {\n        value.classList.add(\"new-title\");\n        setTimeout(()=>{\n            value.classList.remove(\"new-title\");\n        }, 300);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$game.start(); // Write your code here\n\n\n//# sourceMappingURL=index.e3cc831d.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.start();\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n\n    this.board = initialState;\n    this.size = initialState.length;\n\n    this.fieldsRows = this.getFieldsRows();\n\n    this.currentScore = 0;\n    this.currentScoreElement = document.querySelector('.game-score');\n\n    this.loseMessage = document.querySelector('.message-lose');\n    this.winMessage = document.querySelector('.message-win');\n    this.startMessage = document.querySelector('.message-start');\n\n    this.gameStatus = 'idle';\n  }\n\n  moveLeft() {\n    this.move('ArrowLeft');\n  }\n\n  moveRight() {\n    this.move('ArrowRight');\n  }\n\n  moveUp() {\n    this.move('ArrowUp');\n  }\n\n  moveDown() {\n    this.move('ArrowDown');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.currentScore;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start() {\n    this.fillRandomEmptyCell();\n    this.fillRandomEmptyCell();\n\n    const startBtn = document.querySelector('.start');\n\n    this.startBtn = startBtn;\n\n    addEventListener('keydown', (e) => {\n      switch (e.key) {\n        case 'ArrowRight':\n          this.moveRight();\n          break;\n        case 'ArrowLeft':\n          this.moveLeft();\n          break;\n        case 'ArrowUp':\n          this.moveUp();\n          break;\n        case 'ArrowDown':\n          this.moveDown();\n          break;\n      }\n    });\n\n    startBtn.addEventListener('click', () => {\n      if (startBtn.classList.contains('start')) {\n        this.gameStatus = 'playing';\n        this.menageStates();\n      } else {\n        this.restart();\n      }\n    });\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board.forEach((column, i) => {\n      column.forEach((el, j) => {\n        this.board[i][j] = 0;\n      });\n    });\n\n    this.updateField();\n\n    this.gameStatus = 'idle';\n    this.fillRandomEmptyCell();\n    this.fillRandomEmptyCell();\n    this.menageStates();\n  }\n\n  menageStates() {\n    switch (this.gameStatus) {\n      case 'idle':\n        this.currentScore = 0;\n        this.currentScoreElement.innerHTML = this.currentScore;\n        this.startBtn.className = 'button start';\n        this.startBtn.innerHTML = 'Start';\n        this.loseMessage.classList.add('hidden');\n        this.winMessage.classList.add('hidden');\n        this.startMessage.classList.remove('hidden');\n        break;\n      case 'playing':\n        this.startBtn.style.pointerEvents = 'none';\n        this.startMessage.classList.add('hidden');\n        break;\n      case 'win':\n        this.winMessage.classList.remove('hidden');\n        break;\n      case 'lose':\n        this.loseMessage.classList.remove('hidden');\n        break;\n      default:\n        throw new Error('Something went wrong');\n    }\n  }\n\n  move(direction) {\n    let hasChanged = false;\n\n    this.gameStatus = 'playing';\n\n    this.menageStates();\n    this.startBtn.className = 'button restart';\n    this.startBtn.innerHTML = 'Restart';\n    this.startBtn.style.pointerEvents = 'initial';\n    this.checkIfTheGameOver();\n\n    if (direction === 'ArrowUp' || direction === 'ArrowDown') {\n      for (let j = 0; j < this.size; j++) {\n        const column = [...Array(this.size)].map((_, i) => this.board[i][j]);\n        const newColumn = this.transformField(column, direction === 'ArrowUp');\n\n        for (let i = 0; i < this.size; i++) {\n          if (this.board[i][j] !== newColumn[i]) {\n            hasChanged = true;\n            this.board[i][j] = newColumn[i];\n          }\n        }\n      }\n    } else if (direction === 'ArrowLeft' || direction === 'ArrowRight') {\n      for (let i = 0; i < this.size; i++) {\n        const row = this.board[i];\n        const newRow = this.transformField(row, direction === 'ArrowLeft');\n\n        if (row.join(',') !== newRow.join(',')) {\n          hasChanged = true;\n          this.board[i] = newRow;\n        }\n      }\n    }\n\n    if (hasChanged) {\n      this.fillRandomEmptyCell();\n    }\n  }\n\n  checkIfTheGameOver() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          return;\n        }\n\n        if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) {\n          return;\n        }\n\n        if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) {\n          return;\n        }\n      }\n    }\n\n    this.gameStatus = 'lose';\n    this.menageStates();\n  }\n\n  transformField(line, moveToStart) {\n    const newLine = line.filter((cell) => cell !== 0);\n\n    if (!moveToStart) {\n      newLine.reverse();\n    }\n\n    for (let i = 0; i < newLine.length - 1; i++) {\n      if (newLine[i] === newLine[i + 1]) {\n        newLine[i] *= 2;\n        this.updateScore(newLine[i]);\n        newLine.splice(i + 1, 1);\n      }\n    }\n\n    while (newLine.length < this.size) {\n      newLine.push(0);\n    }\n\n    if (!moveToStart) {\n      newLine.reverse();\n    }\n\n    return newLine;\n  }\n\n  updateField() {\n    this.fieldsRows.forEach((column, i) => {\n      column.forEach((cell, j) => {\n        cell.innerHTML = this.board[i][j] === 0 ? '' : this.board[i][j];\n        cell.className = `field-cell field-cell--${this.board[i][j]}`;\n      });\n    });\n  }\n\n  getFieldsRows() {\n    const nodesArr = [];\n    const fieldsRows = document.querySelectorAll('.field-row');\n\n    fieldsRows.forEach((row) => {\n      nodesArr.push(\n        Array.from(row.childNodes).filter(\n          (node) => node.nodeType === Node.ELEMENT_NODE,\n        ),\n      );\n    });\n\n    return nodesArr;\n  }\n\n  updateScore(value) {\n    const winValue = 2048;\n\n    if (value === winValue) {\n      this.gameStatus = 'win';\n      this.menageStates();\n    }\n\n    this.currentScore += value;\n    this.currentScoreElement.innerHTML = this.currentScore;\n  }\n\n  fillRandomEmptyCell() {\n    const emptyFields = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyFields.push({\n            x: i,\n            y: j,\n          });\n        }\n      }\n    }\n\n    if (emptyFields.length > 0) {\n      const randomCell\n        = emptyFields[Math.floor(Math.random() * emptyFields.length)];\n\n      this.board[randomCell.x][randomCell.y] = Math.random() < 0.9 ? 2 : 4;\n      this.updateField();\n\n      this.toggleAnimationClass(this.fieldsRows[randomCell.x][randomCell.y]);\n    }\n  }\n\n  toggleAnimationClass(value) {\n    value.classList.add('new-title');\n\n    setTimeout(() => {\n      value.classList.remove('new-title');\n    }, 300);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["constructor","initialState","console","log","board","size","length","fieldsRows","getFieldsRows","currentScore","currentScoreElement","document","querySelector","loseMessage","winMessage","startMessage","gameStatus","moveLeft","move","moveRight","moveUp","moveDown","getScore","getState","getStatus","start","fillRandomEmptyCell","startBtn","addEventListener","e","key","classList","contains","menageStates","restart","forEach","column","i","el","j","updateField","innerHTML","className","add","remove","style","pointerEvents","Error","direction","hasChanged","checkIfTheGameOver","Array","map","_","newColumn","transformField","row","newRow","join","line","moveToStart","newLine","filter","cell","reverse","updateScore","splice","push","nodesArr","querySelectorAll","from","childNodes","node","nodeType","Node","ELEMENT_NODE","value","emptyFields","x","y","randomCell","Math","floor","random","toggleAnimationClass","setTimeout"],"version":3,"file":"index.e3cc831d.js.map"}