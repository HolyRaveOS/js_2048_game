{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.board = initialState;\n        this.size = initialState.length;\n        this.fieldsRows = this.getFieldsRows();\n        this.currentScore = 0;\n        this.currentScoreElement = document.querySelector(\".game-score\");\n        this.loseMessage = document.querySelector(\".message-lose\");\n        this.winMessage = document.querySelector(\".message-win\");\n        this.startMessage = document.querySelector(\".message-start\");\n        this.gameStatus = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                this.move(\"ArrowLeft\");\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.move(\"ArrowRight\");\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.move(\"ArrowUp\");\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.move(\"ArrowDown\");\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.currentScore;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.gameStatus;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                var _this = this;\n                this.fillRandomEmptyCell();\n                this.fillRandomEmptyCell();\n                var startBtn = document.querySelector(\".start\");\n                this.startBtn = startBtn;\n                addEventListener(\"keydown\", function(e) {\n                    switch(e.key){\n                        case \"ArrowRight\":\n                            _this.moveRight();\n                            break;\n                        case \"ArrowLeft\":\n                            _this.moveLeft();\n                            break;\n                        case \"ArrowUp\":\n                            _this.moveUp();\n                            break;\n                        case \"ArrowDown\":\n                            _this.moveDown();\n                            break;\n                    }\n                });\n                startBtn.addEventListener(\"click\", function() {\n                    if (startBtn.classList.contains(\"start\")) {\n                        _this.gameStatus = \"playing\";\n                        _this.menageStates();\n                    } else _this.restart();\n                });\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var _this = this;\n                this.board.forEach(function(column, i) {\n                    column.forEach(function(el, j) {\n                        _this.board[i][j] = 0;\n                    });\n                });\n                this.updateField();\n                this.gameStatus = \"idle\";\n                this.fillRandomEmptyCell();\n                this.fillRandomEmptyCell();\n                this.menageStates();\n            }\n        },\n        {\n            key: \"menageStates\",\n            value: function menageStates() {\n                switch(this.gameStatus){\n                    case \"idle\":\n                        this.currentScore = 0;\n                        this.currentScoreElement.innerHTML = this.currentScore;\n                        this.startBtn.className = \"button start\";\n                        this.startBtn.innerHTML = \"Start\";\n                        this.loseMessage.classList.add(\"hidden\");\n                        this.winMessage.classList.add(\"hidden\");\n                        this.startMessage.classList.remove(\"hidden\");\n                        break;\n                    case \"playing\":\n                        this.startBtn.style.pointerEvents = \"none\";\n                        this.startMessage.classList.add(\"hidden\");\n                        break;\n                    case \"win\":\n                        this.winMessage.classList.remove(\"hidden\");\n                        break;\n                    case \"lose\":\n                        this.loseMessage.classList.remove(\"hidden\");\n                        break;\n                    default:\n                        throw new Error(\"Something went wrong\");\n                }\n            }\n        },\n        {\n            key: \"move\",\n            value: function move(direction) {\n                var _this = this, _loop = function(j) {\n                    var column = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(Array(_this.size)).map(function(_, i) {\n                        return _this1.board[i][j];\n                    });\n                    var newColumn = _this.transformField(column, direction === \"ArrowUp\");\n                    for(var i = 0; i < _this.size; i++)if (_this.board[i][j] !== newColumn[i]) {\n                        hasChanged = true;\n                        _this.board[i][j] = newColumn[i];\n                    }\n                };\n                var _this1 = this;\n                var hasChanged = false;\n                this.gameStatus = \"playing\";\n                this.menageStates();\n                this.startBtn.className = \"button restart\";\n                this.startBtn.innerHTML = \"Restart\";\n                this.startBtn.style.pointerEvents = \"initial\";\n                this.checkIfTheGameOver();\n                if (direction === \"ArrowUp\" || direction === \"ArrowDown\") for(var j = 0; j < this.size; j++)_loop(j);\n                else if (direction === \"ArrowLeft\" || direction === \"ArrowRight\") for(var i = 0; i < this.size; i++){\n                    var row = this.board[i];\n                    var newRow = this.transformField(row, direction === \"ArrowLeft\");\n                    if (row.join(\",\") !== newRow.join(\",\")) {\n                        hasChanged = true;\n                        this.board[i] = newRow;\n                    }\n                }\n                if (hasChanged) this.fillRandomEmptyCell();\n            }\n        },\n        {\n            key: \"checkIfTheGameOver\",\n            value: function checkIfTheGameOver() {\n                for(var i = 0; i < this.size; i++)for(var j = 0; j < this.size; j++){\n                    if (this.board[i][j] === 0) return;\n                    if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) return;\n                    if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) return;\n                }\n                this.gameStatus = \"lose\";\n                this.menageStates();\n            }\n        },\n        {\n            key: \"transformField\",\n            value: function transformField(line, moveToStart) {\n                var newLine = line.filter(function(cell) {\n                    return cell !== 0;\n                });\n                if (!moveToStart) newLine.reverse();\n                for(var i = 0; i < newLine.length - 1; i++)if (newLine[i] === newLine[i + 1]) {\n                    newLine[i] *= 2;\n                    this.updateScore(newLine[i]);\n                    newLine.splice(i + 1, 1);\n                }\n                while(newLine.length < this.size)newLine.push(0);\n                if (!moveToStart) newLine.reverse();\n                return newLine;\n            }\n        },\n        {\n            key: \"updateField\",\n            value: function updateField() {\n                var _this = this;\n                this.fieldsRows.forEach(function(column, i) {\n                    column.forEach(function(cell, j) {\n                        cell.innerHTML = _this.board[i][j] === 0 ? \"\" : _this.board[i][j];\n                        cell.className = \"field-cell field-cell--\".concat(_this.board[i][j]);\n                    });\n                });\n            }\n        },\n        {\n            key: \"getFieldsRows\",\n            value: function getFieldsRows() {\n                var nodesArr = [];\n                var fieldsRows = document.querySelectorAll(\".field-row\");\n                fieldsRows.forEach(function(row) {\n                    nodesArr.push(Array.from(row.childNodes).filter(function(node) {\n                        return node.nodeType === Node.ELEMENT_NODE;\n                    }));\n                });\n                return nodesArr;\n            }\n        },\n        {\n            key: \"updateScore\",\n            value: function updateScore(value) {\n                var winValue = 2048;\n                if (value === winValue) {\n                    this.gameStatus = \"win\";\n                    this.menageStates();\n                }\n                this.currentScore += value;\n                this.currentScoreElement.innerHTML = this.currentScore;\n            }\n        },\n        {\n            key: \"fillRandomEmptyCell\",\n            value: function fillRandomEmptyCell() {\n                var emptyFields = [];\n                for(var i = 0; i < this.size; i++){\n                    for(var j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyFields.push({\n                        x: i,\n                        y: j\n                    });\n                }\n                if (emptyFields.length > 0) {\n                    var randomCell = emptyFields[Math.floor(Math.random() * emptyFields.length)];\n                    this.board[randomCell.x][randomCell.y] = Math.random() < 0.9 ? 2 : 4;\n                    this.updateField();\n                    this.toggleAnimationClass(this.fieldsRows[randomCell.x][randomCell.y]);\n                }\n            }\n        },\n        {\n            key: \"toggleAnimationClass\",\n            value: function toggleAnimationClass(value) {\n                value.classList.add(\"new-title\");\n                setTimeout(function() {\n                    value.classList.remove(\"new-title\");\n                }, 300);\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n$197cd56b15c33885$var$game.start(); // Write your code here\n\n})();\n//# sourceMappingURL=index.257b7c8f.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.start();\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n\n    this.board = initialState;\n    this.size = initialState.length;\n\n    this.fieldsRows = this.getFieldsRows();\n\n    this.currentScore = 0;\n    this.currentScoreElement = document.querySelector('.game-score');\n\n    this.loseMessage = document.querySelector('.message-lose');\n    this.winMessage = document.querySelector('.message-win');\n    this.startMessage = document.querySelector('.message-start');\n\n    this.gameStatus = 'idle';\n  }\n\n  moveLeft() {\n    this.move('ArrowLeft');\n  }\n\n  moveRight() {\n    this.move('ArrowRight');\n  }\n\n  moveUp() {\n    this.move('ArrowUp');\n  }\n\n  moveDown() {\n    this.move('ArrowDown');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.currentScore;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start() {\n    this.fillRandomEmptyCell();\n    this.fillRandomEmptyCell();\n\n    const startBtn = document.querySelector('.start');\n\n    this.startBtn = startBtn;\n\n    addEventListener('keydown', (e) => {\n      switch (e.key) {\n        case 'ArrowRight':\n          this.moveRight();\n          break;\n        case 'ArrowLeft':\n          this.moveLeft();\n          break;\n        case 'ArrowUp':\n          this.moveUp();\n          break;\n        case 'ArrowDown':\n          this.moveDown();\n          break;\n      }\n    });\n\n    startBtn.addEventListener('click', () => {\n      if (startBtn.classList.contains('start')) {\n        this.gameStatus = 'playing';\n        this.menageStates();\n      } else {\n        this.restart();\n      }\n    });\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board.forEach((column, i) => {\n      column.forEach((el, j) => {\n        this.board[i][j] = 0;\n      });\n    });\n\n    this.updateField();\n\n    this.gameStatus = 'idle';\n    this.fillRandomEmptyCell();\n    this.fillRandomEmptyCell();\n    this.menageStates();\n  }\n\n  menageStates() {\n    switch (this.gameStatus) {\n      case 'idle':\n        this.currentScore = 0;\n        this.currentScoreElement.innerHTML = this.currentScore;\n        this.startBtn.className = 'button start';\n        this.startBtn.innerHTML = 'Start';\n        this.loseMessage.classList.add('hidden');\n        this.winMessage.classList.add('hidden');\n        this.startMessage.classList.remove('hidden');\n        break;\n      case 'playing':\n        this.startBtn.style.pointerEvents = 'none';\n        this.startMessage.classList.add('hidden');\n        break;\n      case 'win':\n        this.winMessage.classList.remove('hidden');\n        break;\n      case 'lose':\n        this.loseMessage.classList.remove('hidden');\n        break;\n      default:\n        throw new Error('Something went wrong');\n    }\n  }\n\n  move(direction) {\n    let hasChanged = false;\n\n    this.gameStatus = 'playing';\n\n    this.menageStates();\n    this.startBtn.className = 'button restart';\n    this.startBtn.innerHTML = 'Restart';\n    this.startBtn.style.pointerEvents = 'initial';\n    this.checkIfTheGameOver();\n\n    if (direction === 'ArrowUp' || direction === 'ArrowDown') {\n      for (let j = 0; j < this.size; j++) {\n        const column = [...Array(this.size)].map((_, i) => this.board[i][j]);\n        const newColumn = this.transformField(column, direction === 'ArrowUp');\n\n        for (let i = 0; i < this.size; i++) {\n          if (this.board[i][j] !== newColumn[i]) {\n            hasChanged = true;\n            this.board[i][j] = newColumn[i];\n          }\n        }\n      }\n    } else if (direction === 'ArrowLeft' || direction === 'ArrowRight') {\n      for (let i = 0; i < this.size; i++) {\n        const row = this.board[i];\n        const newRow = this.transformField(row, direction === 'ArrowLeft');\n\n        if (row.join(',') !== newRow.join(',')) {\n          hasChanged = true;\n          this.board[i] = newRow;\n        }\n      }\n    }\n\n    if (hasChanged) {\n      this.fillRandomEmptyCell();\n    }\n  }\n\n  checkIfTheGameOver() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          return;\n        }\n\n        if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) {\n          return;\n        }\n\n        if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) {\n          return;\n        }\n      }\n    }\n\n    this.gameStatus = 'lose';\n    this.menageStates();\n  }\n\n  transformField(line, moveToStart) {\n    const newLine = line.filter((cell) => cell !== 0);\n\n    if (!moveToStart) {\n      newLine.reverse();\n    }\n\n    for (let i = 0; i < newLine.length - 1; i++) {\n      if (newLine[i] === newLine[i + 1]) {\n        newLine[i] *= 2;\n        this.updateScore(newLine[i]);\n        newLine.splice(i + 1, 1);\n      }\n    }\n\n    while (newLine.length < this.size) {\n      newLine.push(0);\n    }\n\n    if (!moveToStart) {\n      newLine.reverse();\n    }\n\n    return newLine;\n  }\n\n  updateField() {\n    this.fieldsRows.forEach((column, i) => {\n      column.forEach((cell, j) => {\n        cell.innerHTML = this.board[i][j] === 0 ? '' : this.board[i][j];\n        cell.className = `field-cell field-cell--${this.board[i][j]}`;\n      });\n    });\n  }\n\n  getFieldsRows() {\n    const nodesArr = [];\n    const fieldsRows = document.querySelectorAll('.field-row');\n\n    fieldsRows.forEach((row) => {\n      nodesArr.push(\n        Array.from(row.childNodes).filter(\n          (node) => node.nodeType === Node.ELEMENT_NODE,\n        ),\n      );\n    });\n\n    return nodesArr;\n  }\n\n  updateScore(value) {\n    const winValue = 2048;\n\n    if (value === winValue) {\n      this.gameStatus = 'win';\n      this.menageStates();\n    }\n\n    this.currentScore += value;\n    this.currentScoreElement.innerHTML = this.currentScore;\n  }\n\n  fillRandomEmptyCell() {\n    const emptyFields = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyFields.push({\n            x: i,\n            y: j,\n          });\n        }\n      }\n    }\n\n    if (emptyFields.length > 0) {\n      const randomCell\n        = emptyFields[Math.floor(Math.random() * emptyFields.length)];\n\n      this.board[randomCell.x][randomCell.y] = Math.random() < 0.9 ? 2 : 4;\n      this.updateField();\n\n      this.toggleAnimationClass(this.fieldsRows[randomCell.x][randomCell.y]);\n    }\n  }\n\n  toggleAnimationClass(value) {\n    value.classList.add('new-title');\n\n    setTimeout(() => {\n      value.classList.remove('new-title');\n    }, 300);\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","arr2","Array","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","arguments","instance","Constructor","TypeError","console","log","board","size","fieldsRows","getFieldsRows","currentScore","currentScoreElement","document","querySelector","loseMessage","winMessage","startMessage","gameStatus","value","move","_this","fillRandomEmptyCell","startBtn","addEventListener","e","moveRight","moveLeft","moveUp","moveDown","classList","contains","menageStates","restart","forEach","column","el","j","updateField","innerHTML","className","add","remove","style","pointerEvents","Error","direction","_loop","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","map","_","_this1","newColumn","transformField","hasChanged","checkIfTheGameOver","row","newRow","join","line","moveToStart","newLine","filter","cell","reverse","updateScore","splice","push","concat","nodesArr","querySelectorAll","childNodes","node","nodeType","Node","ELEMENT_NODE","emptyFields","x","y","randomCell","Math","floor","random","toggleAnimationClass","setTimeout","start"],"version":3,"file":"index.257b7c8f.js.map"}